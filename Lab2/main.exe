#include <SFML/Graphics.hpp>
#include <functional> 
#include <cmath> 
#include <iostream>

// Функция для отрисовки графика
void drawGraph(sf::RenderWindow& window, std::function<float(float)> func, float xMin, float xMax, float scaleX, float scaleY, sf::Color color) {
    sf::VertexArray graph(sf::LinesStrip);

    for (float x = xMin; x <= xMax; x += 0.1f) {
        float y = func(x); // Вычисление значения функции

        // Преобразование координат в экранные
        float screenX = 400 + x * scaleX;
        float screenY = 300 - y * scaleY;

        // Добавление точки в массив вершин
        graph.append(sf::Vertex(sf::Vector2f(screenX, screenY), color));
    }

    window.draw(graph);
}

// Функция y = -x
float f1(float x) {
    return -x;
}

// (f2 не используется для второй линии, т.к. вторая линия — вертикальная x = -3)
float f2(float x) {
    return 0.0f;
}

int main() {
    // Создание окна
    sf::RenderWindow window(sf::VideoMode(800, 600), "Application for displaying graphs");

    // Переменная для хранения пользовательской точки
    sf::CircleShape userPoint(3);
    userPoint.setFillColor(sf::Color::Red);
    bool userPointExists = false;

    // 1 _ Загрузка шрифта (допишите код)
    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        return -1;
    }
    // 2 _ Текст для отображения координат точки (допишите код)
    sf::Text coordinatesText;
    coordinatesText.setFont(font);
    coordinatesText.setCharacterSize(20);
    coordinatesText.setFillColor(sf::Color::White);
    coordinatesText.setPosition(10, 10);

    // Оси X и Y
    sf::VertexArray xAxis(sf::Lines, 2);
    xAxis[0].position = sf::Vector2f(50, 300);
    xAxis[0].color = sf::Color::White;
    xAxis[1].position = sf::Vector2f(750, 300);
    xAxis[1].color = sf::Color::White;

    sf::VertexArray yAxis(sf::Lines, 2);
    yAxis[0].position = sf::Vector2f(400, 50);
    yAxis[0].color = sf::Color::White;
    yAxis[1].position = sf::Vector2f(400, 550);
    yAxis[1].color = sf::Color::White;

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            // Проверка клика мышью
            if (event.type == sf::Event::MouseButtonPressed) {
                if (event.mouseButton.button == sf::Mouse::Left) {
                    // Получение позиции клика
                    sf::Vector2i mousePos = sf::Mouse::getPosition(window);

                    // Преобразование экранных координат в "математические"
                    float mathX = (mousePos.x - 400) / 10.0f; // масштаб по X
                    float mathY = -(mousePos.y - 300) / 10.0f; // масштаб по Y

                    // Установка новой пользовательской точки
                    userPoint.setPosition(mousePos.x - userPoint.getRadius(),
                        mousePos.y - userPoint.getRadius());
                    userPointExists = true;

                    // 3 _ Логика проверки точки по переменным mathX и mathY
                    std::string pos = "Border";  // по умолчанию — граница

                    const float eps = 1e-4f;
                    bool onLine1 = std::fabs(mathY - f1(mathX)) < eps;        // точка на y = -x
                    bool onLine2 = std::fabs(mathX - (-3.0f)) < eps;           // точка на x = -3

                    if (onLine1 || onLine2) {
                        pos = "Border";
                    }
                    else if (mathX < -3.0f && mathY > f1(mathX)) {
                        pos = "2";
                    }
                    else if (mathX < -3.0f && mathY < f1(mathX)) {
                        pos = "3";
                    }
                    else if (mathX > -3.0f && mathY < f1(mathX)) {
                        pos = "4";
                    }
                    else if (mathX > -3.0f && mathY > f1(mathX)) {
                        pos = "1";
                    }
                    // иначе остаётся "Border"

                    // Обновление текста с координатами точки
                    coordinatesText.setString("Coordinates: (" +
                        std::to_string(mathX) + ", " +
                        std::to_string(mathY) + ")\nPosition: " + pos);
                }
            }
        }

        // 4 _ Очистка экрана (допишите код)
        window.clear();

        // Отрисовка осей
        window.draw(xAxis);
        window.draw(yAxis);

        // 5 _ Отрисовка графика y1 = x*x (заменяем на y = -x)
        drawGraph(window, [](float x) { return -x; }, -10, 10, 10, 10, sf::Color::Blue);

        // 5 _ Отрисовка графика y2 = x + 9 (заменяем на вертикальную x = -3)
        {
            float xConst = -3.0f;
            float screenX = 400 + xConst * 10.0f;
            float screenY1 = 300 - (-10.0f) * 10.0f;
            float screenY2 = 300 - (10.0f) * 10.0f;
            sf::VertexArray line(sf::Lines, 2);
            line[0] = sf::Vertex(sf::Vector2f(screenX, screenY1), sf::Color::Red);
            line[1] = sf::Vertex(sf::Vector2f(screenX, screenY2), sf::Color::Red);
            window.draw(line);
        }

        // Отрисовка пользовательской точки и текста
        if (userPointExists) {
            window.draw(userPoint);
            window.draw(coordinatesText);
        }

        // Отображение нового кадра
        window.display();
    }

    return 0;
}

